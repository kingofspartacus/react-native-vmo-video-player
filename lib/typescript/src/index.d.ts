/// <reference types="react" />
import TextTrackType from './text-track-type';
import FilterType from './filter-type';
import DRMType from './drm-type';
import PropTypes from 'prop-types';
declare const VideoPlayer: {
    (props: any): JSX.Element;
    propTypes: {
        hitSlop?: PropTypes.Validator<import("react-native").Insets | undefined> | undefined;
        onLayout?: PropTypes.Validator<((event: import("react-native").LayoutChangeEvent) => void) | undefined> | undefined;
        pointerEvents?: PropTypes.Validator<"box-none" | "none" | "box-only" | "auto" | undefined> | undefined;
        removeClippedSubviews?: PropTypes.Validator<boolean | undefined> | undefined;
        style?: PropTypes.Validator<import("react-native").StyleProp<import("react-native").ViewStyle>> | undefined;
        testID?: PropTypes.Validator<string | undefined> | undefined;
        nativeID?: PropTypes.Validator<string | undefined> | undefined;
        collapsable?: PropTypes.Validator<boolean | undefined> | undefined;
        needsOffscreenAlphaCompositing?: PropTypes.Validator<boolean | undefined> | undefined;
        renderToHardwareTextureAndroid?: PropTypes.Validator<boolean | undefined> | undefined;
        focusable?: PropTypes.Validator<boolean | undefined> | undefined;
        shouldRasterizeIOS?: PropTypes.Validator<boolean | undefined> | undefined;
        isTVSelectable?: PropTypes.Validator<boolean | undefined> | undefined;
        hasTVPreferredFocus?: PropTypes.Validator<boolean | undefined> | undefined;
        tvParallaxProperties?: PropTypes.Validator<import("react-native").TVParallaxProperties | undefined> | undefined;
        tvParallaxShiftDistanceX?: PropTypes.Validator<number | undefined> | undefined;
        tvParallaxShiftDistanceY?: PropTypes.Validator<number | undefined> | undefined;
        tvParallaxTiltAngle?: PropTypes.Validator<number | undefined> | undefined;
        tvParallaxMagnification?: PropTypes.Validator<number | undefined> | undefined;
        onStartShouldSetResponder?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponder?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderEnd?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderGrant?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderReject?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderMove?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderRelease?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderStart?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onResponderTerminationRequest?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onResponderTerminate?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onStartShouldSetResponderCapture?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onMoveShouldSetResponderCapture?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
        onTouchStart?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchMove?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEnd?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchCancel?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        onTouchEndCapture?: PropTypes.Validator<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
        accessible?: PropTypes.Validator<boolean | undefined> | undefined;
        accessibilityActions?: PropTypes.Validator<readonly Readonly<{
            name: import("react-native").AccessibilityActionName;
            label?: string | undefined;
        }>[] | undefined> | undefined;
        accessibilityLabel?: PropTypes.Validator<string | undefined> | undefined;
        accessibilityRole?: PropTypes.Validator<"none" | "button" | "link" | "search" | "image" | "keyboardkey" | "text" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined> | undefined;
        accessibilityState?: PropTypes.Validator<import("react-native").AccessibilityState | undefined> | undefined;
        accessibilityHint?: PropTypes.Validator<string | undefined> | undefined;
        accessibilityValue?: PropTypes.Validator<import("react-native").AccessibilityValue | undefined> | undefined;
        onAccessibilityAction?: PropTypes.Validator<((event: import("react-native").AccessibilityActionEvent) => void) | undefined> | undefined;
        accessibilityComponentType?: PropTypes.Validator<"none" | "button" | "radiobutton_checked" | "radiobutton_unchecked" | undefined> | undefined;
        accessibilityLiveRegion?: PropTypes.Validator<"none" | "polite" | "assertive" | undefined> | undefined;
        importantForAccessibility?: PropTypes.Validator<"auto" | "yes" | "no" | "no-hide-descendants" | undefined> | undefined;
        accessibilityElementsHidden?: PropTypes.Validator<boolean | undefined> | undefined;
        accessibilityTraits?: PropTypes.Validator<"none" | "button" | "link" | "search" | "image" | "text" | "adjustable" | "header" | "summary" | "selected" | "plays" | "key" | "disabled" | "frequentUpdates" | "startsMedia" | "allowsDirectInteraction" | "pageTurn" | import("react-native").AccessibilityTrait[] | undefined> | undefined;
        accessibilityViewIsModal?: PropTypes.Validator<boolean | undefined> | undefined;
        onAccessibilityEscape?: PropTypes.Validator<(() => void) | undefined> | undefined;
        onAccessibilityTap?: PropTypes.Validator<(() => void) | undefined> | undefined;
        onMagicTap?: PropTypes.Validator<(() => void) | undefined> | undefined;
        accessibilityIgnoresInvertColors?: PropTypes.Validator<boolean | undefined> | undefined;
        filter: PropTypes.Requireable<string>;
        filterEnabled: PropTypes.Requireable<boolean>;
        src: PropTypes.Requireable<object>;
        seek: PropTypes.Requireable<number | object>;
        fullscreen: PropTypes.Requireable<boolean>;
        onVideoLoadStart: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoLoad: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoBuffer: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoError: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoProgress: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoBandwidthUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoSeek: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoEnd: PropTypes.Requireable<(...args: any[]) => any>;
        onTimedMetadata: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoAudioBecomingNoisy: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoExternalPlaybackChange: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoFullscreenPlayerWillPresent: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoFullscreenPlayerDidPresent: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoFullscreenPlayerWillDismiss: PropTypes.Requireable<(...args: any[]) => any>;
        onVideoFullscreenPlayerDidDismiss: PropTypes.Requireable<(...args: any[]) => any>;
        source: PropTypes.Requireable<number | PropTypes.InferProps<{
            uri: PropTypes.Requireable<string>;
        }>>;
        drm: PropTypes.Requireable<PropTypes.InferProps<{
            type: PropTypes.Requireable<string>;
            licenseServer: PropTypes.Requireable<string>;
            headers: PropTypes.Requireable<PropTypes.InferProps<{}>>;
            base64Certificate: PropTypes.Requireable<boolean>;
            certificateUrl: PropTypes.Requireable<string>;
            getLicense: PropTypes.Requireable<(...args: any[]) => any>;
        }>>;
        minLoadRetryCount: PropTypes.Requireable<number>;
        maxBitRate: PropTypes.Requireable<number>;
        resizeMode: PropTypes.Requireable<string>;
        poster: PropTypes.Requireable<string>;
        posterResizeMode: any;
        repeat: PropTypes.Requireable<boolean>;
        automaticallyWaitsToMinimizeStalling: PropTypes.Requireable<boolean>;
        allowsExternalPlayback: PropTypes.Requireable<boolean>;
        selectedAudioTrack: PropTypes.Requireable<PropTypes.InferProps<{
            type: PropTypes.Validator<string>;
            value: PropTypes.Requireable<string | number>;
        }>>;
        selectedVideoTrack: PropTypes.Requireable<PropTypes.InferProps<{
            type: PropTypes.Validator<string>;
            value: PropTypes.Requireable<string | number>;
        }>>;
        selectedTextTrack: PropTypes.Requireable<PropTypes.InferProps<{
            type: PropTypes.Validator<string>;
            value: PropTypes.Requireable<string | number>;
        }>>;
        textTracks: PropTypes.Requireable<(PropTypes.InferProps<{
            title: PropTypes.Requireable<string>;
            uri: PropTypes.Validator<string>;
            type: PropTypes.Requireable<string>;
            language: PropTypes.Validator<string>;
        }> | null | undefined)[]>;
        paused: PropTypes.Requireable<boolean>;
        muted: PropTypes.Requireable<boolean>;
        volume: PropTypes.Requireable<number>;
        bufferConfig: PropTypes.Requireable<PropTypes.InferProps<{
            minBufferMs: PropTypes.Requireable<number>;
            maxBufferMs: PropTypes.Requireable<number>;
            bufferForPlaybackMs: PropTypes.Requireable<number>;
            bufferForPlaybackAfterRebufferMs: PropTypes.Requireable<number>;
        }>>;
        stereoPan: PropTypes.Requireable<number>;
        rate: PropTypes.Requireable<number>;
        pictureInPicture: PropTypes.Requireable<boolean>;
        playInBackground: PropTypes.Requireable<boolean>;
        preferredForwardBufferDuration: PropTypes.Requireable<number>;
        playWhenInactive: PropTypes.Requireable<boolean>;
        ignoreSilentSwitch: PropTypes.Requireable<string>;
        reportBandwidth: PropTypes.Requireable<boolean>;
        disableFocus: PropTypes.Requireable<boolean>;
        controls: PropTypes.Requireable<boolean>;
        audioOnly: PropTypes.Requireable<boolean>;
        currentTime: PropTypes.Requireable<number>;
        fullscreenAutorotate: PropTypes.Requireable<boolean>;
        fullscreenOrientation: PropTypes.Requireable<string>;
        progressUpdateInterval: PropTypes.Requireable<number>;
        useTextureView: PropTypes.Requireable<boolean>;
        hideShutterView: PropTypes.Requireable<boolean>;
        onLoadStart: PropTypes.Requireable<(...args: any[]) => any>;
        onLoad: PropTypes.Requireable<(...args: any[]) => any>;
        onBuffer: PropTypes.Requireable<(...args: any[]) => any>;
        onError: PropTypes.Requireable<(...args: any[]) => any>;
        onProgress: PropTypes.Requireable<(...args: any[]) => any>;
        onBandwidthUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        onSeek: PropTypes.Requireable<(...args: any[]) => any>;
        onEnd: PropTypes.Requireable<(...args: any[]) => any>;
        onFullscreenPlayerWillPresent: PropTypes.Requireable<(...args: any[]) => any>;
        onFullscreenPlayerDidPresent: PropTypes.Requireable<(...args: any[]) => any>;
        onFullscreenPlayerWillDismiss: PropTypes.Requireable<(...args: any[]) => any>;
        onFullscreenPlayerDidDismiss: PropTypes.Requireable<(...args: any[]) => any>;
        onReadyForDisplay: PropTypes.Requireable<(...args: any[]) => any>;
        onPlaybackStalled: PropTypes.Requireable<(...args: any[]) => any>;
        onPlaybackResume: PropTypes.Requireable<(...args: any[]) => any>;
        onPlaybackRateChange: PropTypes.Requireable<(...args: any[]) => any>;
        onAudioFocusChanged: PropTypes.Requireable<(...args: any[]) => any>;
        onAudioBecomingNoisy: PropTypes.Requireable<(...args: any[]) => any>;
        onPictureInPictureStatusChanged: PropTypes.Requireable<(...args: any[]) => any>;
        needsToRestoreUserInterfaceForPictureInPictureStop: PropTypes.Requireable<(...args: any[]) => any>;
        onExternalPlaybackChange: PropTypes.Requireable<(...args: any[]) => any>;
        scaleX: PropTypes.Requireable<number>;
        scaleY: PropTypes.Requireable<number>;
        translateX: PropTypes.Requireable<number>;
        translateY: PropTypes.Requireable<number>;
        rotation: PropTypes.Requireable<number>;
    };
};
export { TextTrackType, FilterType, DRMType };
export default VideoPlayer;
